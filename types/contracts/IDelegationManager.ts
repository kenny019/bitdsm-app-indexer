/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IDelegationManager {
  export type WithdrawalStruct = {
    staker: AddressLike;
    delegatedTo: AddressLike;
    withdrawer: AddressLike;
    nonce: BigNumberish;
    startBlock: BigNumberish;
    strategies: AddressLike[];
    shares: BigNumberish[];
  };

  export type WithdrawalStructOutput = [
    staker: string,
    delegatedTo: string,
    withdrawer: string,
    nonce: bigint,
    startBlock: bigint,
    strategies: string[],
    shares: bigint[],
  ] & {
    staker: string;
    delegatedTo: string;
    withdrawer: string;
    nonce: bigint;
    startBlock: bigint;
    strategies: string[];
    shares: bigint[];
  };

  export type OperatorDetailsStruct = {
    __deprecated_earningsReceiver: AddressLike;
    delegationApprover: AddressLike;
    stakerOptOutWindowBlocks: BigNumberish;
  };

  export type OperatorDetailsStructOutput = [
    __deprecated_earningsReceiver: string,
    delegationApprover: string,
    stakerOptOutWindowBlocks: bigint,
  ] & {
    __deprecated_earningsReceiver: string;
    delegationApprover: string;
    stakerOptOutWindowBlocks: bigint;
  };

  export type QueuedWithdrawalParamsStruct = {
    strategies: AddressLike[];
    shares: BigNumberish[];
    withdrawer: AddressLike;
  };

  export type QueuedWithdrawalParamsStructOutput = [
    strategies: string[],
    shares: bigint[],
    withdrawer: string,
  ] & { strategies: string[]; shares: bigint[]; withdrawer: string };
}

export declare namespace ISignatureUtils {
  export type SignatureWithExpiryStruct = {
    signature: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithExpiryStructOutput = [
    signature: string,
    expiry: bigint,
  ] & { signature: string; expiry: bigint };
}

export interface IDelegationManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELEGATION_APPROVAL_TYPEHASH"
      | "DOMAIN_TYPEHASH"
      | "STAKER_DELEGATION_TYPEHASH"
      | "beaconChainETHStrategy"
      | "calculateCurrentStakerDelegationDigestHash"
      | "calculateDelegationApprovalDigestHash"
      | "calculateStakerDelegationDigestHash"
      | "calculateWithdrawalRoot"
      | "completeQueuedWithdrawal"
      | "completeQueuedWithdrawals"
      | "cumulativeWithdrawalsQueued"
      | "decreaseDelegatedShares"
      | "delegateTo"
      | "delegateToBySignature"
      | "delegatedTo"
      | "delegationApprover"
      | "delegationApproverSaltIsSpent"
      | "domainSeparator"
      | "getOperatorShares"
      | "getWithdrawalDelay"
      | "increaseDelegatedShares"
      | "isDelegated"
      | "isOperator"
      | "minWithdrawalDelayBlocks"
      | "modifyOperatorDetails"
      | "operatorDetails"
      | "operatorShares"
      | "queueWithdrawals"
      | "registerAsOperator"
      | "stakerNonce"
      | "stakerOptOutWindowBlocks"
      | "strategyWithdrawalDelayBlocks"
      | "undelegate"
      | "updateOperatorMetadataURI"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MinWithdrawalDelayBlocksSet"
      | "OperatorDetailsModified"
      | "OperatorMetadataURIUpdated"
      | "OperatorRegistered"
      | "OperatorSharesDecreased"
      | "OperatorSharesIncreased"
      | "StakerDelegated"
      | "StakerForceUndelegated"
      | "StakerUndelegated"
      | "StrategyWithdrawalDelayBlocksSet"
      | "WithdrawalCompleted"
      | "WithdrawalQueued"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DELEGATION_APPROVAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKER_DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beaconChainETHStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCurrentStakerDelegationDigestHash",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDelegationApprovalDigestHash",
    values: [AddressLike, AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakerDelegationDigestHash",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWithdrawalRoot",
    values: [IDelegationManager.WithdrawalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "completeQueuedWithdrawal",
    values: [
      IDelegationManager.WithdrawalStruct,
      AddressLike[],
      BigNumberish,
      boolean,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "completeQueuedWithdrawals",
    values: [
      IDelegationManager.WithdrawalStruct[],
      AddressLike[][],
      BigNumberish[],
      boolean[],
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeWithdrawalsQueued",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseDelegatedShares",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateTo",
    values: [AddressLike, ISignatureUtils.SignatureWithExpiryStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateToBySignature",
    values: [
      AddressLike,
      AddressLike,
      ISignatureUtils.SignatureWithExpiryStruct,
      ISignatureUtils.SignatureWithExpiryStruct,
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationApprover",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationApproverSaltIsSpent",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorShares",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalDelay",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDelegatedShares",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minWithdrawalDelayBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyOperatorDetails",
    values: [IDelegationManager.OperatorDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorShares",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queueWithdrawals",
    values: [IDelegationManager.QueuedWithdrawalParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsOperator",
    values: [IDelegationManager.OperatorDetailsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerOptOutWindowBlocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyWithdrawalDelayBlocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperatorMetadataURI",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_APPROVAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKER_DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beaconChainETHStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurrentStakerDelegationDigestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDelegationApprovalDigestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakerDelegationDigestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWithdrawalRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeWithdrawalsQueued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDelegatedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegateTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateToBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationApproverSaltIsSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDelegatedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDelegated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawalDelayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyOperatorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerOptOutWindowBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyWithdrawalDelayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOperatorMetadataURI",
    data: BytesLike
  ): Result;
}

export namespace MinWithdrawalDelayBlocksSetEvent {
  export type InputTuple = [
    previousValue: BigNumberish,
    newValue: BigNumberish,
  ];
  export type OutputTuple = [previousValue: bigint, newValue: bigint];
  export interface OutputObject {
    previousValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorDetailsModifiedEvent {
  export type InputTuple = [
    operator: AddressLike,
    newOperatorDetails: IDelegationManager.OperatorDetailsStruct,
  ];
  export type OutputTuple = [
    operator: string,
    newOperatorDetails: IDelegationManager.OperatorDetailsStructOutput,
  ];
  export interface OutputObject {
    operator: string;
    newOperatorDetails: IDelegationManager.OperatorDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorMetadataURIUpdatedEvent {
  export type InputTuple = [operator: AddressLike, metadataURI: string];
  export type OutputTuple = [operator: string, metadataURI: string];
  export interface OutputObject {
    operator: string;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorRegisteredEvent {
  export type InputTuple = [
    operator: AddressLike,
    operatorDetails: IDelegationManager.OperatorDetailsStruct,
  ];
  export type OutputTuple = [
    operator: string,
    operatorDetails: IDelegationManager.OperatorDetailsStructOutput,
  ];
  export interface OutputObject {
    operator: string;
    operatorDetails: IDelegationManager.OperatorDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSharesDecreasedEvent {
  export type InputTuple = [
    operator: AddressLike,
    staker: AddressLike,
    strategy: AddressLike,
    shares: BigNumberish,
  ];
  export type OutputTuple = [
    operator: string,
    staker: string,
    strategy: string,
    shares: bigint,
  ];
  export interface OutputObject {
    operator: string;
    staker: string;
    strategy: string;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSharesIncreasedEvent {
  export type InputTuple = [
    operator: AddressLike,
    staker: AddressLike,
    strategy: AddressLike,
    shares: BigNumberish,
  ];
  export type OutputTuple = [
    operator: string,
    staker: string,
    strategy: string,
    shares: bigint,
  ];
  export interface OutputObject {
    operator: string;
    staker: string;
    strategy: string;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakerDelegatedEvent {
  export type InputTuple = [staker: AddressLike, operator: AddressLike];
  export type OutputTuple = [staker: string, operator: string];
  export interface OutputObject {
    staker: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakerForceUndelegatedEvent {
  export type InputTuple = [staker: AddressLike, operator: AddressLike];
  export type OutputTuple = [staker: string, operator: string];
  export interface OutputObject {
    staker: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakerUndelegatedEvent {
  export type InputTuple = [staker: AddressLike, operator: AddressLike];
  export type OutputTuple = [staker: string, operator: string];
  export interface OutputObject {
    staker: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyWithdrawalDelayBlocksSetEvent {
  export type InputTuple = [
    strategy: AddressLike,
    previousValue: BigNumberish,
    newValue: BigNumberish,
  ];
  export type OutputTuple = [
    strategy: string,
    previousValue: bigint,
    newValue: bigint,
  ];
  export interface OutputObject {
    strategy: string;
    previousValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalCompletedEvent {
  export type InputTuple = [withdrawalRoot: BytesLike];
  export type OutputTuple = [withdrawalRoot: string];
  export interface OutputObject {
    withdrawalRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalQueuedEvent {
  export type InputTuple = [
    withdrawalRoot: BytesLike,
    withdrawal: IDelegationManager.WithdrawalStruct,
  ];
  export type OutputTuple = [
    withdrawalRoot: string,
    withdrawal: IDelegationManager.WithdrawalStructOutput,
  ];
  export interface OutputObject {
    withdrawalRoot: string;
    withdrawal: IDelegationManager.WithdrawalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDelegationManager extends BaseContract {
  connect(runner?: ContractRunner | null): IDelegationManager;
  waitForDeployment(): Promise<this>;

  interface: IDelegationManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELEGATION_APPROVAL_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_TYPEHASH: TypedContractMethod<[], [string], "view">;

  STAKER_DELEGATION_TYPEHASH: TypedContractMethod<[], [string], "view">;

  beaconChainETHStrategy: TypedContractMethod<[], [string], "view">;

  calculateCurrentStakerDelegationDigestHash: TypedContractMethod<
    [staker: AddressLike, operator: AddressLike, expiry: BigNumberish],
    [string],
    "view"
  >;

  calculateDelegationApprovalDigestHash: TypedContractMethod<
    [
      staker: AddressLike,
      operator: AddressLike,
      _delegationApprover: AddressLike,
      approverSalt: BytesLike,
      expiry: BigNumberish,
    ],
    [string],
    "view"
  >;

  calculateStakerDelegationDigestHash: TypedContractMethod<
    [
      staker: AddressLike,
      _stakerNonce: BigNumberish,
      operator: AddressLike,
      expiry: BigNumberish,
    ],
    [string],
    "view"
  >;

  calculateWithdrawalRoot: TypedContractMethod<
    [withdrawal: IDelegationManager.WithdrawalStruct],
    [string],
    "view"
  >;

  completeQueuedWithdrawal: TypedContractMethod<
    [
      withdrawal: IDelegationManager.WithdrawalStruct,
      tokens: AddressLike[],
      middlewareTimesIndex: BigNumberish,
      receiveAsTokens: boolean,
    ],
    [void],
    "nonpayable"
  >;

  completeQueuedWithdrawals: TypedContractMethod<
    [
      withdrawals: IDelegationManager.WithdrawalStruct[],
      tokens: AddressLike[][],
      middlewareTimesIndexes: BigNumberish[],
      receiveAsTokens: boolean[],
    ],
    [void],
    "nonpayable"
  >;

  cumulativeWithdrawalsQueued: TypedContractMethod<
    [staker: AddressLike],
    [bigint],
    "view"
  >;

  decreaseDelegatedShares: TypedContractMethod<
    [staker: AddressLike, strategy: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegateTo: TypedContractMethod<
    [
      operator: AddressLike,
      approverSignatureAndExpiry: ISignatureUtils.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  delegateToBySignature: TypedContractMethod<
    [
      staker: AddressLike,
      operator: AddressLike,
      stakerSignatureAndExpiry: ISignatureUtils.SignatureWithExpiryStruct,
      approverSignatureAndExpiry: ISignatureUtils.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  delegatedTo: TypedContractMethod<[staker: AddressLike], [string], "view">;

  delegationApprover: TypedContractMethod<
    [operator: AddressLike],
    [string],
    "view"
  >;

  delegationApproverSaltIsSpent: TypedContractMethod<
    [_delegationApprover: AddressLike, salt: BytesLike],
    [boolean],
    "view"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  getOperatorShares: TypedContractMethod<
    [operator: AddressLike, strategies: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getWithdrawalDelay: TypedContractMethod<
    [strategies: AddressLike[]],
    [bigint],
    "view"
  >;

  increaseDelegatedShares: TypedContractMethod<
    [staker: AddressLike, strategy: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  isDelegated: TypedContractMethod<[staker: AddressLike], [boolean], "view">;

  isOperator: TypedContractMethod<[operator: AddressLike], [boolean], "view">;

  minWithdrawalDelayBlocks: TypedContractMethod<[], [bigint], "view">;

  modifyOperatorDetails: TypedContractMethod<
    [newOperatorDetails: IDelegationManager.OperatorDetailsStruct],
    [void],
    "nonpayable"
  >;

  operatorDetails: TypedContractMethod<
    [operator: AddressLike],
    [IDelegationManager.OperatorDetailsStructOutput],
    "view"
  >;

  operatorShares: TypedContractMethod<
    [operator: AddressLike, strategy: AddressLike],
    [bigint],
    "view"
  >;

  queueWithdrawals: TypedContractMethod<
    [queuedWithdrawalParams: IDelegationManager.QueuedWithdrawalParamsStruct[]],
    [string[]],
    "nonpayable"
  >;

  registerAsOperator: TypedContractMethod<
    [
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
    ],
    [void],
    "nonpayable"
  >;

  stakerNonce: TypedContractMethod<[staker: AddressLike], [bigint], "view">;

  stakerOptOutWindowBlocks: TypedContractMethod<
    [operator: AddressLike],
    [bigint],
    "view"
  >;

  strategyWithdrawalDelayBlocks: TypedContractMethod<
    [strategy: AddressLike],
    [bigint],
    "view"
  >;

  undelegate: TypedContractMethod<
    [staker: AddressLike],
    [string[]],
    "nonpayable"
  >;

  updateOperatorMetadataURI: TypedContractMethod<
    [metadataURI: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELEGATION_APPROVAL_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STAKER_DELEGATION_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beaconChainETHStrategy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateCurrentStakerDelegationDigestHash"
  ): TypedContractMethod<
    [staker: AddressLike, operator: AddressLike, expiry: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateDelegationApprovalDigestHash"
  ): TypedContractMethod<
    [
      staker: AddressLike,
      operator: AddressLike,
      _delegationApprover: AddressLike,
      approverSalt: BytesLike,
      expiry: BigNumberish,
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateStakerDelegationDigestHash"
  ): TypedContractMethod<
    [
      staker: AddressLike,
      _stakerNonce: BigNumberish,
      operator: AddressLike,
      expiry: BigNumberish,
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateWithdrawalRoot"
  ): TypedContractMethod<
    [withdrawal: IDelegationManager.WithdrawalStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeQueuedWithdrawal"
  ): TypedContractMethod<
    [
      withdrawal: IDelegationManager.WithdrawalStruct,
      tokens: AddressLike[],
      middlewareTimesIndex: BigNumberish,
      receiveAsTokens: boolean,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeQueuedWithdrawals"
  ): TypedContractMethod<
    [
      withdrawals: IDelegationManager.WithdrawalStruct[],
      tokens: AddressLike[][],
      middlewareTimesIndexes: BigNumberish[],
      receiveAsTokens: boolean[],
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cumulativeWithdrawalsQueued"
  ): TypedContractMethod<[staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseDelegatedShares"
  ): TypedContractMethod<
    [staker: AddressLike, strategy: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateTo"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      approverSignatureAndExpiry: ISignatureUtils.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateToBySignature"
  ): TypedContractMethod<
    [
      staker: AddressLike,
      operator: AddressLike,
      stakerSignatureAndExpiry: ISignatureUtils.SignatureWithExpiryStruct,
      approverSignatureAndExpiry: ISignatureUtils.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegatedTo"
  ): TypedContractMethod<[staker: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "delegationApprover"
  ): TypedContractMethod<[operator: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "delegationApproverSaltIsSpent"
  ): TypedContractMethod<
    [_delegationApprover: AddressLike, salt: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOperatorShares"
  ): TypedContractMethod<
    [operator: AddressLike, strategies: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWithdrawalDelay"
  ): TypedContractMethod<[strategies: AddressLike[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseDelegatedShares"
  ): TypedContractMethod<
    [staker: AddressLike, strategy: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDelegated"
  ): TypedContractMethod<[staker: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<[operator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "minWithdrawalDelayBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "modifyOperatorDetails"
  ): TypedContractMethod<
    [newOperatorDetails: IDelegationManager.OperatorDetailsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operatorDetails"
  ): TypedContractMethod<
    [operator: AddressLike],
    [IDelegationManager.OperatorDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "operatorShares"
  ): TypedContractMethod<
    [operator: AddressLike, strategy: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "queueWithdrawals"
  ): TypedContractMethod<
    [queuedWithdrawalParams: IDelegationManager.QueuedWithdrawalParamsStruct[]],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAsOperator"
  ): TypedContractMethod<
    [
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakerNonce"
  ): TypedContractMethod<[staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakerOptOutWindowBlocks"
  ): TypedContractMethod<[operator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "strategyWithdrawalDelayBlocks"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "undelegate"
  ): TypedContractMethod<[staker: AddressLike], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOperatorMetadataURI"
  ): TypedContractMethod<[metadataURI: string], [void], "nonpayable">;

  getEvent(
    key: "MinWithdrawalDelayBlocksSet"
  ): TypedContractEvent<
    MinWithdrawalDelayBlocksSetEvent.InputTuple,
    MinWithdrawalDelayBlocksSetEvent.OutputTuple,
    MinWithdrawalDelayBlocksSetEvent.OutputObject
  >;
  getEvent(
    key: "OperatorDetailsModified"
  ): TypedContractEvent<
    OperatorDetailsModifiedEvent.InputTuple,
    OperatorDetailsModifiedEvent.OutputTuple,
    OperatorDetailsModifiedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorMetadataURIUpdated"
  ): TypedContractEvent<
    OperatorMetadataURIUpdatedEvent.InputTuple,
    OperatorMetadataURIUpdatedEvent.OutputTuple,
    OperatorMetadataURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorRegistered"
  ): TypedContractEvent<
    OperatorRegisteredEvent.InputTuple,
    OperatorRegisteredEvent.OutputTuple,
    OperatorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSharesDecreased"
  ): TypedContractEvent<
    OperatorSharesDecreasedEvent.InputTuple,
    OperatorSharesDecreasedEvent.OutputTuple,
    OperatorSharesDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSharesIncreased"
  ): TypedContractEvent<
    OperatorSharesIncreasedEvent.InputTuple,
    OperatorSharesIncreasedEvent.OutputTuple,
    OperatorSharesIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "StakerDelegated"
  ): TypedContractEvent<
    StakerDelegatedEvent.InputTuple,
    StakerDelegatedEvent.OutputTuple,
    StakerDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "StakerForceUndelegated"
  ): TypedContractEvent<
    StakerForceUndelegatedEvent.InputTuple,
    StakerForceUndelegatedEvent.OutputTuple,
    StakerForceUndelegatedEvent.OutputObject
  >;
  getEvent(
    key: "StakerUndelegated"
  ): TypedContractEvent<
    StakerUndelegatedEvent.InputTuple,
    StakerUndelegatedEvent.OutputTuple,
    StakerUndelegatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyWithdrawalDelayBlocksSet"
  ): TypedContractEvent<
    StrategyWithdrawalDelayBlocksSetEvent.InputTuple,
    StrategyWithdrawalDelayBlocksSetEvent.OutputTuple,
    StrategyWithdrawalDelayBlocksSetEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalCompleted"
  ): TypedContractEvent<
    WithdrawalCompletedEvent.InputTuple,
    WithdrawalCompletedEvent.OutputTuple,
    WithdrawalCompletedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalQueued"
  ): TypedContractEvent<
    WithdrawalQueuedEvent.InputTuple,
    WithdrawalQueuedEvent.OutputTuple,
    WithdrawalQueuedEvent.OutputObject
  >;

  filters: {
    "MinWithdrawalDelayBlocksSet(uint256,uint256)": TypedContractEvent<
      MinWithdrawalDelayBlocksSetEvent.InputTuple,
      MinWithdrawalDelayBlocksSetEvent.OutputTuple,
      MinWithdrawalDelayBlocksSetEvent.OutputObject
    >;
    MinWithdrawalDelayBlocksSet: TypedContractEvent<
      MinWithdrawalDelayBlocksSetEvent.InputTuple,
      MinWithdrawalDelayBlocksSetEvent.OutputTuple,
      MinWithdrawalDelayBlocksSetEvent.OutputObject
    >;

    "OperatorDetailsModified(address,tuple)": TypedContractEvent<
      OperatorDetailsModifiedEvent.InputTuple,
      OperatorDetailsModifiedEvent.OutputTuple,
      OperatorDetailsModifiedEvent.OutputObject
    >;
    OperatorDetailsModified: TypedContractEvent<
      OperatorDetailsModifiedEvent.InputTuple,
      OperatorDetailsModifiedEvent.OutputTuple,
      OperatorDetailsModifiedEvent.OutputObject
    >;

    "OperatorMetadataURIUpdated(address,string)": TypedContractEvent<
      OperatorMetadataURIUpdatedEvent.InputTuple,
      OperatorMetadataURIUpdatedEvent.OutputTuple,
      OperatorMetadataURIUpdatedEvent.OutputObject
    >;
    OperatorMetadataURIUpdated: TypedContractEvent<
      OperatorMetadataURIUpdatedEvent.InputTuple,
      OperatorMetadataURIUpdatedEvent.OutputTuple,
      OperatorMetadataURIUpdatedEvent.OutputObject
    >;

    "OperatorRegistered(address,tuple)": TypedContractEvent<
      OperatorRegisteredEvent.InputTuple,
      OperatorRegisteredEvent.OutputTuple,
      OperatorRegisteredEvent.OutputObject
    >;
    OperatorRegistered: TypedContractEvent<
      OperatorRegisteredEvent.InputTuple,
      OperatorRegisteredEvent.OutputTuple,
      OperatorRegisteredEvent.OutputObject
    >;

    "OperatorSharesDecreased(address,address,address,uint256)": TypedContractEvent<
      OperatorSharesDecreasedEvent.InputTuple,
      OperatorSharesDecreasedEvent.OutputTuple,
      OperatorSharesDecreasedEvent.OutputObject
    >;
    OperatorSharesDecreased: TypedContractEvent<
      OperatorSharesDecreasedEvent.InputTuple,
      OperatorSharesDecreasedEvent.OutputTuple,
      OperatorSharesDecreasedEvent.OutputObject
    >;

    "OperatorSharesIncreased(address,address,address,uint256)": TypedContractEvent<
      OperatorSharesIncreasedEvent.InputTuple,
      OperatorSharesIncreasedEvent.OutputTuple,
      OperatorSharesIncreasedEvent.OutputObject
    >;
    OperatorSharesIncreased: TypedContractEvent<
      OperatorSharesIncreasedEvent.InputTuple,
      OperatorSharesIncreasedEvent.OutputTuple,
      OperatorSharesIncreasedEvent.OutputObject
    >;

    "StakerDelegated(address,address)": TypedContractEvent<
      StakerDelegatedEvent.InputTuple,
      StakerDelegatedEvent.OutputTuple,
      StakerDelegatedEvent.OutputObject
    >;
    StakerDelegated: TypedContractEvent<
      StakerDelegatedEvent.InputTuple,
      StakerDelegatedEvent.OutputTuple,
      StakerDelegatedEvent.OutputObject
    >;

    "StakerForceUndelegated(address,address)": TypedContractEvent<
      StakerForceUndelegatedEvent.InputTuple,
      StakerForceUndelegatedEvent.OutputTuple,
      StakerForceUndelegatedEvent.OutputObject
    >;
    StakerForceUndelegated: TypedContractEvent<
      StakerForceUndelegatedEvent.InputTuple,
      StakerForceUndelegatedEvent.OutputTuple,
      StakerForceUndelegatedEvent.OutputObject
    >;

    "StakerUndelegated(address,address)": TypedContractEvent<
      StakerUndelegatedEvent.InputTuple,
      StakerUndelegatedEvent.OutputTuple,
      StakerUndelegatedEvent.OutputObject
    >;
    StakerUndelegated: TypedContractEvent<
      StakerUndelegatedEvent.InputTuple,
      StakerUndelegatedEvent.OutputTuple,
      StakerUndelegatedEvent.OutputObject
    >;

    "StrategyWithdrawalDelayBlocksSet(address,uint256,uint256)": TypedContractEvent<
      StrategyWithdrawalDelayBlocksSetEvent.InputTuple,
      StrategyWithdrawalDelayBlocksSetEvent.OutputTuple,
      StrategyWithdrawalDelayBlocksSetEvent.OutputObject
    >;
    StrategyWithdrawalDelayBlocksSet: TypedContractEvent<
      StrategyWithdrawalDelayBlocksSetEvent.InputTuple,
      StrategyWithdrawalDelayBlocksSetEvent.OutputTuple,
      StrategyWithdrawalDelayBlocksSetEvent.OutputObject
    >;

    "WithdrawalCompleted(bytes32)": TypedContractEvent<
      WithdrawalCompletedEvent.InputTuple,
      WithdrawalCompletedEvent.OutputTuple,
      WithdrawalCompletedEvent.OutputObject
    >;
    WithdrawalCompleted: TypedContractEvent<
      WithdrawalCompletedEvent.InputTuple,
      WithdrawalCompletedEvent.OutputTuple,
      WithdrawalCompletedEvent.OutputObject
    >;

    "WithdrawalQueued(bytes32,tuple)": TypedContractEvent<
      WithdrawalQueuedEvent.InputTuple,
      WithdrawalQueuedEvent.OutputTuple,
      WithdrawalQueuedEvent.OutputObject
    >;
    WithdrawalQueued: TypedContractEvent<
      WithdrawalQueuedEvent.InputTuple,
      WithdrawalQueuedEvent.OutputTuple,
      WithdrawalQueuedEvent.OutputObject
    >;
  };
}
