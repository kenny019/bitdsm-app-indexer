/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IRewardsCoordinator {
  export type StrategyAndMultiplierStruct = {
    strategy: AddressLike;
    multiplier: BigNumberish;
  };

  export type StrategyAndMultiplierStructOutput = [
    strategy: string,
    multiplier: bigint,
  ] & { strategy: string; multiplier: bigint };

  export type RewardsSubmissionStruct = {
    strategiesAndMultipliers: IRewardsCoordinator.StrategyAndMultiplierStruct[];
    token: AddressLike;
    amount: BigNumberish;
    startTimestamp: BigNumberish;
    duration: BigNumberish;
  };

  export type RewardsSubmissionStructOutput = [
    strategiesAndMultipliers: IRewardsCoordinator.StrategyAndMultiplierStructOutput[],
    token: string,
    amount: bigint,
    startTimestamp: bigint,
    duration: bigint,
  ] & {
    strategiesAndMultipliers: IRewardsCoordinator.StrategyAndMultiplierStructOutput[];
    token: string;
    amount: bigint;
    startTimestamp: bigint;
    duration: bigint;
  };
}

export declare namespace ISignatureUtils {
  export type SignatureWithSaltAndExpiryStruct = {
    signature: BytesLike;
    salt: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithSaltAndExpiryStructOutput = [
    signature: string,
    salt: string,
    expiry: bigint,
  ] & { signature: string; salt: string; expiry: bigint };
}

export interface BitDSMServiceManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "avsDirectory"
      | "confirmDeposit"
      | "confirmWithdrawal"
      | "createAVSRewardsSubmission"
      | "deregisterOperatorFromAVS"
      | "getOperatorRestakedStrategies"
      | "getRestakeableStrategies"
      | "initialize"
      | "owner"
      | "registerOperatorToAVS"
      | "renounceOwnership"
      | "rewardsInitiator"
      | "setRewardsInitiator"
      | "stakeRegistry"
      | "transferOwnership"
      | "updateAVSMetadataURI"
      | "withdrawBitcoinCompleteTx"
      | "withdrawBitcoinPSBT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BitcoinWithdrawalTransactionSigned"
      | "Initialized"
      | "OwnershipTransferred"
      | "RewardsInitiatorUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "avsDirectory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDeposit",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmWithdrawal",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAVSRewardsSubmission",
    values: [IRewardsCoordinator.RewardsSubmissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperatorFromAVS",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorRestakedStrategies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRestakeableStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerOperatorToAVS",
    values: [AddressLike, ISignatureUtils.SignatureWithSaltAndExpiryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsInitiator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsInitiator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAVSMetadataURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBitcoinCompleteTx",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBitcoinPSBT",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "avsDirectory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAVSRewardsSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperatorFromAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorRestakedStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRestakeableStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatorToAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAVSMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBitcoinCompleteTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBitcoinPSBT",
    data: BytesLike
  ): Result;
}

export namespace BitcoinWithdrawalTransactionSignedEvent {
  export type InputTuple = [
    pod: AddressLike,
    operator: AddressLike,
    amount: BigNumberish,
  ];
  export type OutputTuple = [pod: string, operator: string, amount: bigint];
  export interface OutputObject {
    pod: string;
    operator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsInitiatorUpdatedEvent {
  export type InputTuple = [
    prevRewardsInitiator: AddressLike,
    newRewardsInitiator: AddressLike,
  ];
  export type OutputTuple = [
    prevRewardsInitiator: string,
    newRewardsInitiator: string,
  ];
  export interface OutputObject {
    prevRewardsInitiator: string;
    newRewardsInitiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BitDSMServiceManager extends BaseContract {
  connect(runner?: ContractRunner | null): BitDSMServiceManager;
  waitForDeployment(): Promise<this>;

  interface: BitDSMServiceManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  avsDirectory: TypedContractMethod<[], [string], "view">;

  confirmDeposit: TypedContractMethod<
    [pod: AddressLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  confirmWithdrawal: TypedContractMethod<
    [pod: AddressLike, transaction: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  createAVSRewardsSubmission: TypedContractMethod<
    [rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[]],
    [void],
    "nonpayable"
  >;

  deregisterOperatorFromAVS: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  getOperatorRestakedStrategies: TypedContractMethod<
    [_operator: AddressLike],
    [string[]],
    "view"
  >;

  getRestakeableStrategies: TypedContractMethod<[], [string[]], "view">;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _rewardsInitiator: AddressLike,
      bitcoinPodManager: AddressLike,
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerOperatorToAVS: TypedContractMethod<
    [
      operator: AddressLike,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardsInitiator: TypedContractMethod<[], [string], "view">;

  setRewardsInitiator: TypedContractMethod<
    [newRewardsInitiator: AddressLike],
    [void],
    "nonpayable"
  >;

  stakeRegistry: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAVSMetadataURI: TypedContractMethod<
    [_metadataURI: string],
    [void],
    "nonpayable"
  >;

  withdrawBitcoinCompleteTx: TypedContractMethod<
    [
      pod: AddressLike,
      amount: BigNumberish,
      completeTx: BytesLike,
      signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  withdrawBitcoinPSBT: TypedContractMethod<
    [
      pod: AddressLike,
      amount: BigNumberish,
      psbtTransaction: BytesLike,
      signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "avsDirectory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "confirmDeposit"
  ): TypedContractMethod<
    [pod: AddressLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmWithdrawal"
  ): TypedContractMethod<
    [pod: AddressLike, transaction: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createAVSRewardsSubmission"
  ): TypedContractMethod<
    [rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deregisterOperatorFromAVS"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOperatorRestakedStrategies"
  ): TypedContractMethod<[_operator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRestakeableStrategies"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _rewardsInitiator: AddressLike,
      bitcoinPodManager: AddressLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerOperatorToAVS"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardsInitiator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setRewardsInitiator"
  ): TypedContractMethod<
    [newRewardsInitiator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAVSMetadataURI"
  ): TypedContractMethod<[_metadataURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBitcoinCompleteTx"
  ): TypedContractMethod<
    [
      pod: AddressLike,
      amount: BigNumberish,
      completeTx: BytesLike,
      signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawBitcoinPSBT"
  ): TypedContractMethod<
    [
      pod: AddressLike,
      amount: BigNumberish,
      psbtTransaction: BytesLike,
      signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BitcoinWithdrawalTransactionSigned"
  ): TypedContractEvent<
    BitcoinWithdrawalTransactionSignedEvent.InputTuple,
    BitcoinWithdrawalTransactionSignedEvent.OutputTuple,
    BitcoinWithdrawalTransactionSignedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardsInitiatorUpdated"
  ): TypedContractEvent<
    RewardsInitiatorUpdatedEvent.InputTuple,
    RewardsInitiatorUpdatedEvent.OutputTuple,
    RewardsInitiatorUpdatedEvent.OutputObject
  >;

  filters: {
    "BitcoinWithdrawalTransactionSigned(address,address,uint256)": TypedContractEvent<
      BitcoinWithdrawalTransactionSignedEvent.InputTuple,
      BitcoinWithdrawalTransactionSignedEvent.OutputTuple,
      BitcoinWithdrawalTransactionSignedEvent.OutputObject
    >;
    BitcoinWithdrawalTransactionSigned: TypedContractEvent<
      BitcoinWithdrawalTransactionSignedEvent.InputTuple,
      BitcoinWithdrawalTransactionSignedEvent.OutputTuple,
      BitcoinWithdrawalTransactionSignedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardsInitiatorUpdated(address,address)": TypedContractEvent<
      RewardsInitiatorUpdatedEvent.InputTuple,
      RewardsInitiatorUpdatedEvent.OutputTuple,
      RewardsInitiatorUpdatedEvent.OutputObject
    >;
    RewardsInitiatorUpdated: TypedContractEvent<
      RewardsInitiatorUpdatedEvent.InputTuple,
      RewardsInitiatorUpdatedEvent.OutputTuple,
      RewardsInitiatorUpdatedEvent.OutputObject
    >;
  };
}
