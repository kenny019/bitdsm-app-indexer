/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IBitcoinPodManager {
  export type BitcoinDepositRequestStruct = {
    transactionId: BytesLike;
    amount: BigNumberish;
    isPending: boolean;
  };

  export type BitcoinDepositRequestStructOutput = [
    transactionId: string,
    amount: bigint,
    isPending: boolean,
  ] & { transactionId: string; amount: bigint; isPending: boolean };
}

export interface BitcoinPodManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "appRegistry"
      | "bitDSMRegistry"
      | "confirmBitcoinDeposit"
      | "createPod"
      | "delegatePod"
      | "getBitcoinDepositRequest"
      | "getBitcoinWithdrawalAddress"
      | "initialize"
      | "lockPod"
      | "owner"
      | "paused"
      | "podToApp"
      | "podToBitcoinDepositRequest"
      | "podToWithdrawalAddress"
      | "renounceOwnership"
      | "transferOwnership"
      | "undelegatePod"
      | "unlockPod"
      | "userToPod"
      | "verifyBitcoinDepositRequest"
      | "withdrawBitcoinAsTokens"
      | "withdrawBitcoinCompleteTxRequest"
      | "withdrawBitcoinPSBTRequest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BitcoinBurned"
      | "BitcoinDepositConfirmed"
      | "BitcoinMinted"
      | "BitcoinWithdrawalCompleteTxRequest"
      | "BitcoinWithdrawalPSBTRequest"
      | "BitcoinWithdrawnFromPod"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "PodCreated"
      | "PodDelegated"
      | "PodUndelegated"
      | "Unpaused"
      | "VerifyBitcoinDepositRequest"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "appRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bitDSMRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmBitcoinDeposit",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPod",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatePod",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBitcoinDepositRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBitcoinWithdrawalAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "podToApp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "podToBitcoinDepositRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "podToWithdrawalAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegatePod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userToPod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBitcoinDepositRequest",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBitcoinAsTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBitcoinCompleteTxRequest",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBitcoinPSBTRequest",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "appRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitDSMRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmBitcoinDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatePod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBitcoinDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBitcoinWithdrawalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockPod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "podToApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "podToBitcoinDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "podToWithdrawalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegatePod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockPod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userToPod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyBitcoinDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBitcoinAsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBitcoinCompleteTxRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBitcoinPSBTRequest",
    data: BytesLike
  ): Result;
}

export namespace BitcoinBurnedEvent {
  export type InputTuple = [pod: AddressLike, amount: BigNumberish];
  export type OutputTuple = [pod: string, amount: bigint];
  export interface OutputObject {
    pod: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BitcoinDepositConfirmedEvent {
  export type InputTuple = [pod: AddressLike, amount: BigNumberish];
  export type OutputTuple = [pod: string, amount: bigint];
  export interface OutputObject {
    pod: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BitcoinMintedEvent {
  export type InputTuple = [pod: AddressLike, amount: BigNumberish];
  export type OutputTuple = [pod: string, amount: bigint];
  export interface OutputObject {
    pod: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BitcoinWithdrawalCompleteTxRequestEvent {
  export type InputTuple = [
    pod: AddressLike,
    operator: AddressLike,
    preSignedBitcoinTx: BytesLike,
  ];
  export type OutputTuple = [
    pod: string,
    operator: string,
    preSignedBitcoinTx: string,
  ];
  export interface OutputObject {
    pod: string;
    operator: string;
    preSignedBitcoinTx: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BitcoinWithdrawalPSBTRequestEvent {
  export type InputTuple = [
    pod: AddressLike,
    operator: AddressLike,
    withdrawAddress: BytesLike,
  ];
  export type OutputTuple = [
    pod: string,
    operator: string,
    withdrawAddress: string,
  ];
  export interface OutputObject {
    pod: string;
    operator: string;
    withdrawAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BitcoinWithdrawnFromPodEvent {
  export type InputTuple = [pod: AddressLike, withdrawAddress: BytesLike];
  export type OutputTuple = [pod: string, withdrawAddress: string];
  export interface OutputObject {
    pod: string;
    withdrawAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PodCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    pod: AddressLike,
    operator: AddressLike,
  ];
  export type OutputTuple = [user: string, pod: string, operator: string];
  export interface OutputObject {
    user: string;
    pod: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PodDelegatedEvent {
  export type InputTuple = [pod: AddressLike, appContract: AddressLike];
  export type OutputTuple = [pod: string, appContract: string];
  export interface OutputObject {
    pod: string;
    appContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PodUndelegatedEvent {
  export type InputTuple = [pod: AddressLike];
  export type OutputTuple = [pod: string];
  export interface OutputObject {
    pod: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifyBitcoinDepositRequestEvent {
  export type InputTuple = [
    pod: AddressLike,
    operator: AddressLike,
    bitcoinDepositRequest: IBitcoinPodManager.BitcoinDepositRequestStruct,
  ];
  export type OutputTuple = [
    pod: string,
    operator: string,
    bitcoinDepositRequest: IBitcoinPodManager.BitcoinDepositRequestStructOutput,
  ];
  export interface OutputObject {
    pod: string;
    operator: string;
    bitcoinDepositRequest: IBitcoinPodManager.BitcoinDepositRequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BitcoinPodManager extends BaseContract {
  connect(runner?: ContractRunner | null): BitcoinPodManager;
  waitForDeployment(): Promise<this>;

  interface: BitcoinPodManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  appRegistry: TypedContractMethod<[], [string], "view">;

  bitDSMRegistry: TypedContractMethod<[], [string], "view">;

  confirmBitcoinDeposit: TypedContractMethod<
    [pod: AddressLike, transactionId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  createPod: TypedContractMethod<
    [operator: AddressLike, btcAddress: BytesLike],
    [string],
    "nonpayable"
  >;

  delegatePod: TypedContractMethod<
    [pod: AddressLike, appContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getBitcoinDepositRequest: TypedContractMethod<
    [pod: AddressLike],
    [IBitcoinPodManager.BitcoinDepositRequestStructOutput],
    "view"
  >;

  getBitcoinWithdrawalAddress: TypedContractMethod<
    [pod: AddressLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _appRegistry: AddressLike,
      _bitDSMRegistry: AddressLike,
      bitDSMServiceManager: AddressLike,
    ],
    [void],
    "nonpayable"
  >;

  lockPod: TypedContractMethod<[pod: AddressLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  podToApp: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  podToBitcoinDepositRequest: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        transactionId: string;
        amount: bigint;
        isPending: boolean;
      },
    ],
    "view"
  >;

  podToWithdrawalAddress: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  undelegatePod: TypedContractMethod<[pod: AddressLike], [void], "nonpayable">;

  unlockPod: TypedContractMethod<[pod: AddressLike], [void], "nonpayable">;

  userToPod: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  verifyBitcoinDepositRequest: TypedContractMethod<
    [pod: AddressLike, transactionId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawBitcoinAsTokens: TypedContractMethod<
    [pod: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawBitcoinCompleteTxRequest: TypedContractMethod<
    [
      pod: AddressLike,
      preSignedWithdrawTransaction: BytesLike,
      withdrawAddress: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  withdrawBitcoinPSBTRequest: TypedContractMethod<
    [pod: AddressLike, withdrawAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "appRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bitDSMRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "confirmBitcoinDeposit"
  ): TypedContractMethod<
    [pod: AddressLike, transactionId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPod"
  ): TypedContractMethod<
    [operator: AddressLike, btcAddress: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegatePod"
  ): TypedContractMethod<
    [pod: AddressLike, appContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBitcoinDepositRequest"
  ): TypedContractMethod<
    [pod: AddressLike],
    [IBitcoinPodManager.BitcoinDepositRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBitcoinWithdrawalAddress"
  ): TypedContractMethod<[pod: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _appRegistry: AddressLike,
      _bitDSMRegistry: AddressLike,
      bitDSMServiceManager: AddressLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockPod"
  ): TypedContractMethod<[pod: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "podToApp"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "podToBitcoinDepositRequest"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        transactionId: string;
        amount: bigint;
        isPending: boolean;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "podToWithdrawalAddress"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "undelegatePod"
  ): TypedContractMethod<[pod: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockPod"
  ): TypedContractMethod<[pod: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userToPod"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "verifyBitcoinDepositRequest"
  ): TypedContractMethod<
    [pod: AddressLike, transactionId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawBitcoinAsTokens"
  ): TypedContractMethod<[pod: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBitcoinCompleteTxRequest"
  ): TypedContractMethod<
    [
      pod: AddressLike,
      preSignedWithdrawTransaction: BytesLike,
      withdrawAddress: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawBitcoinPSBTRequest"
  ): TypedContractMethod<
    [pod: AddressLike, withdrawAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BitcoinBurned"
  ): TypedContractEvent<
    BitcoinBurnedEvent.InputTuple,
    BitcoinBurnedEvent.OutputTuple,
    BitcoinBurnedEvent.OutputObject
  >;
  getEvent(
    key: "BitcoinDepositConfirmed"
  ): TypedContractEvent<
    BitcoinDepositConfirmedEvent.InputTuple,
    BitcoinDepositConfirmedEvent.OutputTuple,
    BitcoinDepositConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "BitcoinMinted"
  ): TypedContractEvent<
    BitcoinMintedEvent.InputTuple,
    BitcoinMintedEvent.OutputTuple,
    BitcoinMintedEvent.OutputObject
  >;
  getEvent(
    key: "BitcoinWithdrawalCompleteTxRequest"
  ): TypedContractEvent<
    BitcoinWithdrawalCompleteTxRequestEvent.InputTuple,
    BitcoinWithdrawalCompleteTxRequestEvent.OutputTuple,
    BitcoinWithdrawalCompleteTxRequestEvent.OutputObject
  >;
  getEvent(
    key: "BitcoinWithdrawalPSBTRequest"
  ): TypedContractEvent<
    BitcoinWithdrawalPSBTRequestEvent.InputTuple,
    BitcoinWithdrawalPSBTRequestEvent.OutputTuple,
    BitcoinWithdrawalPSBTRequestEvent.OutputObject
  >;
  getEvent(
    key: "BitcoinWithdrawnFromPod"
  ): TypedContractEvent<
    BitcoinWithdrawnFromPodEvent.InputTuple,
    BitcoinWithdrawnFromPodEvent.OutputTuple,
    BitcoinWithdrawnFromPodEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PodCreated"
  ): TypedContractEvent<
    PodCreatedEvent.InputTuple,
    PodCreatedEvent.OutputTuple,
    PodCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PodDelegated"
  ): TypedContractEvent<
    PodDelegatedEvent.InputTuple,
    PodDelegatedEvent.OutputTuple,
    PodDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "PodUndelegated"
  ): TypedContractEvent<
    PodUndelegatedEvent.InputTuple,
    PodUndelegatedEvent.OutputTuple,
    PodUndelegatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerifyBitcoinDepositRequest"
  ): TypedContractEvent<
    VerifyBitcoinDepositRequestEvent.InputTuple,
    VerifyBitcoinDepositRequestEvent.OutputTuple,
    VerifyBitcoinDepositRequestEvent.OutputObject
  >;

  filters: {
    "BitcoinBurned(address,uint256)": TypedContractEvent<
      BitcoinBurnedEvent.InputTuple,
      BitcoinBurnedEvent.OutputTuple,
      BitcoinBurnedEvent.OutputObject
    >;
    BitcoinBurned: TypedContractEvent<
      BitcoinBurnedEvent.InputTuple,
      BitcoinBurnedEvent.OutputTuple,
      BitcoinBurnedEvent.OutputObject
    >;

    "BitcoinDepositConfirmed(address,uint256)": TypedContractEvent<
      BitcoinDepositConfirmedEvent.InputTuple,
      BitcoinDepositConfirmedEvent.OutputTuple,
      BitcoinDepositConfirmedEvent.OutputObject
    >;
    BitcoinDepositConfirmed: TypedContractEvent<
      BitcoinDepositConfirmedEvent.InputTuple,
      BitcoinDepositConfirmedEvent.OutputTuple,
      BitcoinDepositConfirmedEvent.OutputObject
    >;

    "BitcoinMinted(address,uint256)": TypedContractEvent<
      BitcoinMintedEvent.InputTuple,
      BitcoinMintedEvent.OutputTuple,
      BitcoinMintedEvent.OutputObject
    >;
    BitcoinMinted: TypedContractEvent<
      BitcoinMintedEvent.InputTuple,
      BitcoinMintedEvent.OutputTuple,
      BitcoinMintedEvent.OutputObject
    >;

    "BitcoinWithdrawalCompleteTxRequest(address,address,bytes)": TypedContractEvent<
      BitcoinWithdrawalCompleteTxRequestEvent.InputTuple,
      BitcoinWithdrawalCompleteTxRequestEvent.OutputTuple,
      BitcoinWithdrawalCompleteTxRequestEvent.OutputObject
    >;
    BitcoinWithdrawalCompleteTxRequest: TypedContractEvent<
      BitcoinWithdrawalCompleteTxRequestEvent.InputTuple,
      BitcoinWithdrawalCompleteTxRequestEvent.OutputTuple,
      BitcoinWithdrawalCompleteTxRequestEvent.OutputObject
    >;

    "BitcoinWithdrawalPSBTRequest(address,address,bytes)": TypedContractEvent<
      BitcoinWithdrawalPSBTRequestEvent.InputTuple,
      BitcoinWithdrawalPSBTRequestEvent.OutputTuple,
      BitcoinWithdrawalPSBTRequestEvent.OutputObject
    >;
    BitcoinWithdrawalPSBTRequest: TypedContractEvent<
      BitcoinWithdrawalPSBTRequestEvent.InputTuple,
      BitcoinWithdrawalPSBTRequestEvent.OutputTuple,
      BitcoinWithdrawalPSBTRequestEvent.OutputObject
    >;

    "BitcoinWithdrawnFromPod(address,bytes)": TypedContractEvent<
      BitcoinWithdrawnFromPodEvent.InputTuple,
      BitcoinWithdrawnFromPodEvent.OutputTuple,
      BitcoinWithdrawnFromPodEvent.OutputObject
    >;
    BitcoinWithdrawnFromPod: TypedContractEvent<
      BitcoinWithdrawnFromPodEvent.InputTuple,
      BitcoinWithdrawnFromPodEvent.OutputTuple,
      BitcoinWithdrawnFromPodEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PodCreated(address,address,address)": TypedContractEvent<
      PodCreatedEvent.InputTuple,
      PodCreatedEvent.OutputTuple,
      PodCreatedEvent.OutputObject
    >;
    PodCreated: TypedContractEvent<
      PodCreatedEvent.InputTuple,
      PodCreatedEvent.OutputTuple,
      PodCreatedEvent.OutputObject
    >;

    "PodDelegated(address,address)": TypedContractEvent<
      PodDelegatedEvent.InputTuple,
      PodDelegatedEvent.OutputTuple,
      PodDelegatedEvent.OutputObject
    >;
    PodDelegated: TypedContractEvent<
      PodDelegatedEvent.InputTuple,
      PodDelegatedEvent.OutputTuple,
      PodDelegatedEvent.OutputObject
    >;

    "PodUndelegated(address)": TypedContractEvent<
      PodUndelegatedEvent.InputTuple,
      PodUndelegatedEvent.OutputTuple,
      PodUndelegatedEvent.OutputObject
    >;
    PodUndelegated: TypedContractEvent<
      PodUndelegatedEvent.InputTuple,
      PodUndelegatedEvent.OutputTuple,
      PodUndelegatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerifyBitcoinDepositRequest(address,address,tuple)": TypedContractEvent<
      VerifyBitcoinDepositRequestEvent.InputTuple,
      VerifyBitcoinDepositRequestEvent.OutputTuple,
      VerifyBitcoinDepositRequestEvent.OutputObject
    >;
    VerifyBitcoinDepositRequest: TypedContractEvent<
      VerifyBitcoinDepositRequestEvent.InputTuple,
      VerifyBitcoinDepositRequestEvent.OutputTuple,
      VerifyBitcoinDepositRequestEvent.OutputObject
    >;
  };
}
